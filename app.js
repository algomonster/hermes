var express = require('express');var path = require('path');var favicon = require('serve-favicon');var logger = require('morgan');var cookieParser = require('cookie-parser');var bodyParser = require('body-parser');var routes = require('./routes/index');var messages = require('./routes/messages');var app = express();var pubsub = require('node-internal-pubsub');// view engine setupapp.set('views', path.join(__dirname, 'views'));app.set('view engine', 'jade');// uncomment after placing your favicon in /public//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));app.use(logger('dev'));app.use(bodyParser.json());app.use(bodyParser.urlencoded({ extended: false }));app.use(cookieParser());app.use(express.static(path.join(__dirname, 'public')));app.use('/', routes);app.use('/messages', messages);// catch 404 and forward to error handlerapp.use(function(req, res, next) {  var err = new Error('Not Found');  err.status = 404;  next(err);});// error handlers// development error handler// will print stacktraceif (app.get('env') === 'development') {  app.use(function(err, req, res, next) {    res.status(err.status || 500);    res.render('error', {      message: err.message,      error: err    });  });}// production error handler// no stacktraces leaked to userapp.use(function(err, req, res, next) {  res.status(err.status || 500);  res.render('error', {    message: err.message,    error: {}  });});var server = require('http').createServer()    , url = require('url')    , WebSocketServer = require('ws').Server    , wss = new WebSocketServer({ server: server })    , port = 4000;wss.on('connection', function connection(webSocketsClient) {    console.log('Connected new WebSockets client');    var subscriber = pubsub.createSubscriber();    subscriber.psubscribe(/channel/);    subscriber.on('pmessage', function(pattern, channel, message) {        console.log('WS Connection subscriber was receive new message from internal bus', channel, message);        webSocketsClient.send(message);    });    // var location = url.parse(webSocketsClient.upgradeReq.url, true);    // you might use location.query.access_token to authenticate or share sessions    // or ws.upgradeReq.headers.cookie (see http://stackoverflow.com/a/16395220/151312)    webSocketsClient.on('message', function incoming(message) {        console.log('received: %s', message);    });    webSocketsClient.on('close', function closing(){        subscriber.punsubscribe(/channel/);        console.log('Client connection closed');    });    webSocketsClient.send('Welcome to Hermes');});server.on('request', app);//server.listen(port, function () { console.log('Listening on ' + server.address().port) });module.exports = server;