var express = require('express');var sockjs = require('sockjs');var path = require('path');var favicon = require('serve-favicon');var logger = require('morgan');var cookieParser = require('cookie-parser');var bodyParser = require('body-parser');var routes = require('./routes/index');var messages = require('./routes/messages');var app = express();var pubsub = require('node-internal-pubsub');// view engine setupapp.set('views', path.join(__dirname, 'views'));app.set('view engine', 'jade');// uncomment after placing your favicon in /public//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));app.use(logger('dev'));app.use(bodyParser.json());app.use(bodyParser.urlencoded({ extended: false }));app.use(cookieParser());app.use(express.static(path.join(__dirname, 'public')));app.use('/', routes);app.use('/messages', messages);// catch 404 and forward to error handlerapp.use(function(req, res, next) {  var err = new Error('Not Found');  err.status = 404;  next(err);});// error handlers// development error handler// will print stacktraceif (app.get('env') === 'development') {  app.use(function(err, req, res, next) {    res.status(err.status || 500);    res.render('error', {      message: err.message,      error: err    });  });}// Production error handler, no StackTraces leaked to userapp.use(function(err, req, res, next) {    if (typeof res.status == 'function'){        res.status(err.status || 500);        res.render('error', {            message: err.message,            error: {}        });    }});var server = require('http').createServer()    , port = 4000;// Echo Servervar sockJsServer = sockjs.createServer({ sockjs_url: 'http://cdn.jsdelivr.net/sockjs/1.0.1/sockjs.min.js' });sockJsServer.on('connection', function(connection) {    //console.log('Connected new WebSockets client');    var subscriber = pubsub.createSubscriber();    subscriber.psubscribe(/channel/);    subscriber.on('pmessage', function(pattern, channel, message) {        //console.log('WS Connection subscriber was receive new message from internal bus', channel, message);        connection.write(message);    });    connection.on('data', function(message) {        connection.write(message);        //console.log('received: %s', message);    });    connection.on('close', function() {        subscriber.punsubscribe(/channel/);        //console.log('Client connection closed');    });    connection.write('Welcome to Hermes');});// Install Echo Server as handlersockJsServer.installHandlers(server, {prefix: '/comet'});server.on('request', app);module.exports = server;